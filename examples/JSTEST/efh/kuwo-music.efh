<!-- 适用于 elecV2P v3.7.2 及以上版本 -->
<!-- 脚本仅供测试使用，请勿用于其他用途 -->
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="theme-color" content="var(--main-bk)">
    <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
    <title>Kuwo Music Download - elecV2P</title>
    <style type="text/css">
      :root {
        --main-bk: #003153;
        --main-fc: #FAFAFD;
        --main-cl: #2890EE;
        --note-bk: #EF7A82;
        --secd-bk: #2890EEB8;
        --green-bk: #66FF0088;
      }

      html, body {
        margin: 0;
        padding: 0;
      }

      #app {
        width: 100%;
        min-height: 100vh;
        padding: 0.5em;
        box-sizing: border-box;
        word-break: break-all;
        color: var(--main-fc);
        background-color: var(--main-bk);
      }

      .eflex {
        display: flex;
        align-items: center;
        justify-content: space-around;
      }
      .eflex--wrap {
        flex-flow: wrap;
      }
      .yflex_f1 {
        flex: 1;
      }

      .eul {
        list-style: none;
        padding: 0;
        margin: 0;
        border-top: 1px solid;
      }
      .eli {
        border-bottom: 1px solid;
        padding: 3px 0px;
      }
      .eli--down {
        display: flex;
        justify-content: space-between;
        background-image: linear-gradient(to right, var(--green-bk), var(--green-bk));
        background-repeat: no-repeat;
        transition: background-size 1s linear;
      }
      .eres {
        background: var(--main-fc);
        color: var(--main-cl);
        padding: 6px 3px;
      }
      .ehistory {
        text-align: center;
        margin: 6px;
      }
      .espan {
        display: inline-block;
        margin: 2px 8px;
      }
      .espan--border {
        border: 2px solid var(--main-cl);
        padding: 4px 8px;
        margin: 0;
        border-radius: 8px;
        color: var(--main-fc);
      }
      .eli--down .espan {
        min-width: 80px;
        text-align: right;
      }
      .ehistory .espan, .ecursor {
        cursor: pointer;
      }
      .espan--btn {
        background: var(--main-cl);
        padding: 0 8px;
        border-radius: 8px;
        cursor: pointer;
        user-select: none;
      }
      .epadding0 {
        padding: 0;
      }
      .edown {
        display: inline-block;
        padding: 0 8px;
        border-radius: 8px 0 0 8px;
      }
      .eplay {
        padding: 0 4px;
        color: var(--main-cl);
        background: var(--main-fc);
        border-radius: 0 8px 8px 0;
      }
      .yselect, .yinput {
        height: 40px;
        min-width: 80px;
        font-size: 20px;
        border-radius: 8px;
        padding: 0 6px;
        color: var(--main-cl);
        border: none;
        box-sizing: border-box;
        font-family: var(--font-fm);
      }
      .yselect--short, .yinput--short {
        width: 80px;
        margin: 0 0.5em;
      }

      .ybutton {
        width: 120px;
        height: 40px;
        border: none;
        border-radius: 0.5em;
        font-size: 20px;
        color: var(--main-fc);
        background: var(--main-cl);
        cursor: pointer;
      }
      .ybutton--h36, .epreview {
        height: 36px;
      }
      .ebk--green {
        background: var(--green-bk);
      }
      .ebk--note {
        background-color: var(--note-bk);
      }
      .ebk--blue {
        background: var(--secd-bk);
      }
      .ebk--loading {
        background-image: linear-gradient(to right, transparent, var(--note-bk), transparent);
        background-size: 10%;
        background-repeat: no-repeat;
        animation: loading 5s ease-in-out infinite;
      }
      @keyframes loading {
        0% {
          background-position-x: 0%;
        }
        50% {
          background-position-x: 100%;
        }
        100% {
          background-position-x: 0%;
        }
      }
      .ehidden {
        display: none;
      }
      .emedia {
        position: fixed;
        top: 60px;
        right: 8px;
        display: inline-flex;
        min-width: 300px;
        max-width: 50%;
        max-height: 60%;
        border-radius: 1.5em;
        background: var(--secd-bk);
      }
      .emedia_delete {
        position: absolute;
        right: .5em;
        top: .5em;
        padding: 6px;
        background: var(--main-bk);
        border-radius: 8px;
        opacity: 0;
        cursor: pointer;
      }
      .emedia:hover .emedia_delete, .emedia[data-delshow=true] .emedia_delete {
        opacity: 1;
      }
      .emax-wp100 {
        max-width: 100%;
      }
      .emin-w300 {
        min-width: 300px;
      }
    </style>
    <!-- Note: when deploying, replace "development.js" with "production.min.js". -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  </head>
  <body><noscript><strong>Please enable JavaScript to continue.</strong></noscript>
    <div id="app"></div>
    <script type="text/javascript">
      function kSize(size = 0, k = 1024) {
        if (size < k) {
          return size + ' B'
        }
        if (size < k*k) {
          return (size/k).toFixed(2) + ' K'
        }
        if (size < k*k*k) {
          return (size/(k*k)).toFixed(2) + ' M'
        }
        return (size/(k*k*k)).toFixed(2) + ' G'
      }
      function htmlDecode(input) {
        const tagsToReplace = {
          '&nbsp;': ' ',
          '&amp;': '&',
          '&lt;em&gt;': '',
          '&lt;/em&gt;': '',
          '&lt;': '《',
          '&gt;': '》',
          '&quot;': '"',
          '?': '？',
          '&apos;': '\'',
        }
        return input.replace(/&nbsp;|&amp;|&lt;em&gt;|&lt;\/em&gt;|&lt;|&gt;|&quot;|\?|&apos;/g, tag=>tagsToReplace[tag] ?? tag);
      }
      function setTitle(title = 'elecV2P'){
        document.title = title
      }
      function streamUrl(url){
        return location.protocol === 'https:' ? `/data?type=stream&url=${encodeURIComponent(url)}` : url
      }
    </script>
    <script type="text/babel">
    // sublime 用户推荐安装 Package: Naomi 进行高亮显示
      // Todo:
      // - 删除已下载文件
      // Done:
      // - 移动端 preview 问题
      // - 进度条拖动问题
      // - preview 移动
      // - getOrgUrl(isHttps)
      // - 预览后选择下载
      // - 子目录预览问题
      // - 右键复制链接
      // - sse 断开重连提醒
      // - 删除单个搜索历史
      // - 下载完播放测试
      // - sse id 优化
      // - 搜索历史
      // - 显示 总大小
      // - skip download 提醒
      // - 下载目录设置
      // - 超时下载提醒

      const useState = React.useState
      const useEffect = React.useEffect

      function MyApp() {
        const [search, setSearch] = useState({ word: '', history: [] })
        const [reslist, setReslist] = useState([])
        const [resraw, setResraw] = useState('')
        const [page, setPage] = useState(0)
        const [subfold, setSubfold] = useState('')
        const [mediaurl, setMediaurl] = useState('')

        const handleChange = (e)=>{
          setSearch({ word: e.target.value, history: search.history })
          setPage(0)
        }
        const searchRes = ()=>{
          const word = search.word, history = [...new Set([word, ...search.history])]
          setSearch({ word, history })
          localStorage.setItem('search_history', JSON.stringify(history))
          const search_url = `http://search.kuwo.cn/r.s?all=${word}&ft=music&itemset=web_2013&client=kt&pn=${page}&rn=10&rformat=json&encoding=utf8`
          console.debug('search url:', search_url)
          setResraw(`正在搜索 ${word}...`)
          fetch(streamUrl(search_url)).then(res=>res.text()).then(res=>{
            let obj = (new Function("return " + res))();
            setReslist(obj.abslist.map(f=>[htmlDecode(f.ARTIST), htmlDecode(f.SONGNAME), f.MUSICRID]))
            if (obj.abslist.length) {
              setPage(Number(page)+1)
              setResraw(`成功获取 ${word} 相关搜索结果`)
              setSubfold(word)
            } else {
              setResraw(`没有找到 ${word} 相关数据`)
            }
          }).catch(e=>{
            setResraw(`${search_url} error ${e.message}`)
            console.error(e)
          })
        }
        const getUrl = (e, name, rid)=>{
          if (e.target.dataset.d === 'finish') {
            setResraw(`${name} 已下载`)
            return
          }
          if (e.target.dataset.d === 'start') {
            setResraw(`${name} 下载中`)
            return
          }
          if (e.target.dataset.m === 'preview') {
            setMediaurl(streamUrl(e.target.dataset.url))
            const name = e.target.dataset.name
            setResraw(`开始播放 ${name}`)
            setTitle(name + ' - elecV2P Player')
            return
          }
          const type = e.target.dataset.type || 'mp3'
          if (e.target.dataset.m === 'notfound') {
            setResraw(`${name} ${type} 对应资源无结果`)
            return
          }
          if (e.target.dataset.m === 'download') {
            e.target.dataset.d = 'start'
            const url = e.target.innerText
            if (!/^http:\/\//.test(url)) {
              setResraw(`${url} 并不是 http 链接`)
              return
            }
            name += '.' + url.split('.').pop()
            if (subfold) {
              name = `${subfold}/${name}`
            }
            setResraw(`准备下载 ${name}...`)
            $fend('download', {
              name, url,
              timeout: 15000,
            }).then(res=>res.text()).then(res=>{
              if (/download fail/.test(res)) {
                e.target.dataset.d = ''
                setResraw(`${name} 下载结果 ${res}`)
                return
              }
              e.target.dataset.d = 'finish'
              e.target.style.background = 'var(--green-bk)'
              if (!/still running/.test(res)) {
                setResraw(`${name} 下载结果 ${res}`)
              }
            }).catch(e=>{
              setResraw(`${name} 下载 error ${e.message}`)
              console.error(e)
            })
            return
          }
          const search_url = `http://antiserver.kuwo.cn/anti.s?type=convert_url&rid=${rid}&format=${type}&response=url`
          setResraw(`${name} ${type} 资源链接获取中...`)
          fetch(streamUrl(search_url)).then(res=>res.text()).then(res=>{
            if (/^http:\/\//.test(res)) {
              e.target.dataset.d = 'finish'
              e.target.classList.add('epadding0')
              e.target.innerHTML = `<span data-m="download" class="edown">${res}</span><span class="eplay" data-name="${name}.${type}" data-m="preview" data-url="${res}">⏵</span>`
              setResraw(`成功获取 ${name} ${type} 资源链接，再次点击进行下载，右键复制`)
            } else {
              e.target.dataset.m = 'notfound'
              e.target.innerText = '资源不存在'
              setResraw(`没有找到 ${name} ${type} 对应资源`)
            }
          }).catch(e=>{
            setResraw(`${search_url} error ${e.message}`)
            console.error(e)
          })
        }
        const copyToClipboard = e => {
          e.preventDefault();
          if (e.target.dataset.m !== 'download') return;
          const url = e.target.innerText;
          navigator.clipboard.writeText(url).then(()=>setResraw(url + ' 已复制到粘贴板')).catch(error=>{
            setResraw(url + ' 复制失败 ' + error.message);
          });
        }

        useEffect(
          ()=>{
            const history = JSON.parse(localStorage.getItem('search_history')||'[]')
            setSearch({ word: history[0] || '王菲', history })
          }, []
        )
        return (
          <>
            <div className="eflex">
              <input className="yinput yflex_f1" value={search.word} onChange={handleChange} onKeyDown={(e)=>{
                if (e.keyCode === 13) {
                  searchRes()
                }
              }}/>
              <input class="yinput yinput--short" type="number" value={page} onChange={e=>setPage(e.target.value)} placeholder="page" />
              <button onClick={searchRes} className="ybutton">SEARCH</button>
              <input class="yinput yinput--short" value={subfold} onChange={e=>setSubfold(e.target.value)} placeholder="子目录" title="文件保存子目录" />
            </div>
            <div className="ehistory">
              <span className="espan" onClick={()=>{setSearch({ ...search, history: [] });localStorage.removeItem('search_history')}}>搜索历史：</span>
              {
                search.history.map(h=>(<span className="espan" onClick={()=>{
                  const idx = search.history.indexOf(h)
                  search.history.splice(idx, 1)
                  setSearch({ word: h, history: [...search.history] })
                }}>{h}</span>))
              }
            </div>
            <ul className="eul">{reslist.map(item=>(
              <li className="eli" key={item[2]} data-rid={item[2]}>
                <span className="espan">{item[0]}</span>
                <span className="espan">{item[1]}</span>
                <span className="espan espan--btn" data-type="mp3" onClick={e=>getUrl(e, item[1], item[2])} onContextMenu={copyToClipboard}>MP3</span>
                <span className="espan espan--btn" data-type="mp4" onClick={e=>getUrl(e, item[1], item[2])} onContextMenu={copyToClipboard}>MP4</span>
              </li>
            ))}</ul>
            <div className="eres">{resraw}</div>
            <DownList setResraw={setResraw} />
            <MediaPreview mediaurl={mediaurl} setMediaurl={setMediaurl} />
          </>
        )
      }
      function MediaPreview({ mediaurl, setMediaurl }) {
        const [position, setPosition] = useState([0, 0, 0, 0])
        const volumeSet = (e)=>{
          if (e.target.dataset.vol === '0') {
            e.target.volume = 0.3
            e.target.dataset.vol = '1'
          }
        }
        const dragStart = (e)=>{
          // e.preventDefault();
          // console.debug('drag start', ...position);
          e.dataTransfer.effectAllowed = 'move';
          setPosition([e.clientX, e.clientY, position[2], position[3]]);
        }
        const dragEnd = (e)=>{
          e.preventDefault();
          const endp = [position[2] + e.clientX - position[0], position[3] + e.clientY - position[1]];
          endp[0] = endp[0] < 0 ? Math.max(e.target.clientWidth-window.innerWidth+8, endp[0]) : 0;
          endp[1] = endp[1] > 0 ? Math.min(window.innerHeight-e.target.clientHeight-60, endp[1]) : 0;
          e.dataTransfer.dropEffect = 'move';
          e.target.style = `transform: translate(${endp[0]}px, ${endp[1]}px);`;
          setPosition([position[0], position[1], endp[0], endp[1]]);
        }
        return (
          <div className={'ehidden' + (mediaurl?' emedia':'')}
            draggable="true"
            onDragStart={dragStart}
            onDragEnd={dragEnd}
            onClick={(e)=>{
              e.currentTarget.dataset.delshow = e.currentTarget.dataset.delshow !== 'true' ? 'true' : '';
              e.preventDefault();
            }}
          >
            <video className="emax-wp100 emin-w300" src={mediaurl} autoplay="true" controls onEnded={()=>{
              setTitle('Kuwo Music Download - elecV2P');
            }} onLoadedMetadata={volumeSet} data-vol="0"></video>
            <span className="emedia_delete" onClick={()=>{
              setMediaurl('');
              setTitle('Kuwo Music Download - elecV2P');
            }}>❌</span>
          </div>
        )
      }

      function DownList({ setResraw }){
        const [preurl, setPreurl] = useState('')
        const [downlist, setDownlist] = useState({})
        const [sseonline, setSseonline] = useState(false)

        const statueUpdate = (name, { status, total, skip })=>{
          setDownlist((prevList)=>((status && !skip) ? { ...prevList, [name]: { status, total } } : { [name]: { status: status||'0.00%', total, skip }, ...prevList }))
        }
        const sseNew = ()=>{
          if (sseonline) {
            setResraw('elecV2P SSE 已连接');
            return;
          }
          const ssevent = new EventSource('/sse/elecV2P/kuwomusic');
          // 所有客户端会同步接收 SSE 同一路径下的消息
          ssevent.onopen = (event) => {
            setResraw('elecV2P SSE 连接成功')
          }
          ssevent.onmessage = (event)=>{
            const { name, dsize, total, start, skip, type } = JSON.parse(event.data);
            if (type === 'init') {
              // SSE 初始连接返回的数据 { type, data }
              setSseonline(true);
              return;
            }
            if (skip) {
              statueUpdate(name, { status: '100.00%', total: '已存在，跳过下载', skip: true });
            } else if (start) {
              statueUpdate(name, { status: 0, total });
            } else {
              statueUpdate(name, { status: (dsize/total*100).toFixed(2) + '%', total });
            }
          }
          ssevent.onerror = (error)=>{
            setSseonline(false);
            ssevent.close();
            console.error('sse close', error);
            setResraw(`SSE 已断开, 无法接收后台文件下载进度`);
            // alert('SSE 已断开, 无法接收后台文件下载进度\n点击 SSE 已断开 按钮进行重连');
          }
        }
        useEffect(sseNew, [])
        const volumeSet = (e)=>{
          if (e.target.dataset.vol === '0') {
            e.target.volume = 0.3
            e.target.dataset.vol = '1'
          }
        }
        return (
          <ul className={'eul' + (!sseonline?' ebk--loading':'')}>
            <li className="eli eflex eflex--wrap" key="downlist">
              {preurl && <audio className="epreview" src={preurl} autoplay="true" controls onLoadedMetadata={volumeSet} data-vol="0"></audio>}
              <span className="espan--border">下载列表 {Object.keys(downlist).length}</span>
              <button className="ybutton ybutton--h36" onClick={()=>setDownlist({})}>清空</button>
              <a className="espan--border" href="/efss/" target="elecV2PEFSS">EFSS/music 查看全部</a>
              <button className={'ybutton ybutton--h36 ' + (sseonline?'ebk--green':'ebk--note')} onClick={()=>{
                if (sseonline) {
                  setResraw('elecV2P SSE 已连接');
                } else {
                  setResraw('elecV2P SSE 重连中...');
                  sseNew();
                }
              }} title="用于接收后台下载进度">SSE {sseonline?'已连接':'已断开'}</button>
            </li>
            {Object.keys(downlist).map(key=>{
              const { status, total, skip } = downlist[key]
              return (
                <li className={'eli eli--down' + (skip?' ebk--blue':'')} style={{backgroundSize: status}} key={key}>
                  <span>{key}</span>
                  <div className="downstatus">
                    {status==='100.00%' && <sapn className="espan ecursor" onClick={(e)=>{
                      if (e.target.innerText === '⏵') {
                        setPreurl('/efss/music/'+key)
                        setTitle(key + ' - elecV2P Player')
                        e.target.innerText = '⏸︎'
                      } else {
                        e.target.innerText = '⏵'
                        setTitle('Kuwo Music Download - elecV2P')
                        setPreurl('')
                      }
                    }}>⏵</sapn>}
                    <span className="espan">{!skip?kSize(total):total}</span>
                    <span className="espan">{status}</span>
                  </div>
                </li>
              )}
            )}
          </ul>
        )
      }

      const app = document.getElementById('app');
      const root = ReactDOM.createRoot(app);
      root.render(<MyApp />);
    </script>
    <!-- 以下为在 elecV2P 后台运行的脚本 -->
    <script favend>
      // console.clear();     // 是否清除之前的日志
      function kSize(size, k = 1024) {
        if (size < k) {
          return size + ' B'
        }
        if (size < k*k) {
          return (size/k).toFixed(2) + ' K'
        }
        if (size < k*k*k) {
          return (size/(k*k)).toFixed(2) + ' M'
        }
        return (size/(k*k*k)).toFixed(2) + ' G'
      }
      $fend('download', data=>{
        console.log('download name', data.name, 'url', data.url)
        return new Promise((resolve, reject)=>{
          $download(data.url, {
            folder: 'efss/music',
            name: data.name,
            existskip: true,
          }, (options)=>{
            // callback 函数
            if (options.start) {
              $ws.sse('kuwomusic', { name: data.name, start: options.start, total: Number(options.total) })
              console.log(`${options.name} 下载开始 ${options.total ? '总大小 ' + kSize(options.total) : ''}`)
            } else if (options.finish) {
              // $ws.sse('kuwomusic', { name: data.name, finish: options.finish, total: Number(options.total) })
              console.log(`${options.name} 下载完成 ${options.total ? '总大小 ' + kSize(options.total) : ''}`)
            } else {
              $ws.sse('kuwomusic', { name: data.name, dsize: options.dsize, total: Number(options.total) })
              options.chunk % 100 === 0 && console.log(`${options.name} ${options.chunk } ${kSize(options.dsize)}/${kSize(options.total)}\x1b[J`)
            }
          })
          .then(d=>{
            resolve(d)
            if (/skip download/.test(d)) {
              $ws.sse('kuwomusic', { name: data.name, skip: true })
            }
          })
          .catch(e=>resolve(e.message || e))
        })
      })
    </script>
  </body>
</html>
